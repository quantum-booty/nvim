priority -50

global !p
# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet ** "bold"
**${1:${VISUAL}}**$0
endsnippet

snippet *** "bold italics"
***${1:${VISUAL}}***$0
endsnippet

snippet /* "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:https://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`$1\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`
$1
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:https://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet detail "Disclosure"
<details${3: open=""}>
  ${1:<summary>${2}</summary>}$0
</details>
endsnippet

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv = match.group(1)`
endsnippet


snippet \in ""
∈
endsnippet

snippet \notin ""
∉
endsnippet

snippet \circ "function composition" iA
∘
endsnippet


snippet \Alpha "Α" iA
Α
endsnippet
snippet \Beta "Β" iA
Β
endsnippet
snippet \Gamma "Γ" iA
Γ
endsnippet
snippet \Delta "Δ" iA
Δ
endsnippet
snippet \Epsilon "Ε" iA
Ε
endsnippet
snippet \Zeta "Ζ" iA
Ζ
endsnippet
snippet \Eta "Η" iA
Η
endsnippet
snippet \Theta "Θ" iA
Θ
endsnippet
snippet \Iota "Ι" iA
Ι
endsnippet
snippet \Kappa "Κ" iA
Κ
endsnippet
snippet \Lambda "Λ" iA
Λ
endsnippet
snippet \upMu "Μ" iA
Μ
endsnippet
snippet \upNu "Ν" iA
Ν
endsnippet
snippet \Xi "Ξ" iA
Ξ
endsnippet
snippet \upOmicron "Ο" iA
Ο
endsnippet
snippet \Pi "Π" iA
Π
endsnippet
snippet \Rho "Ρ" iA
Ρ
endsnippet
snippet \Sigma "Σ" iA
Σ
endsnippet
snippet \Tau "Τ" iA
Τ
endsnippet
snippet \Upsilon "Υ" iA
Υ
endsnippet
snippet \Phi "Φ" iA
Φ
endsnippet
snippet \Chi "Χ" iA
Χ
endsnippet
snippet \Psi "Ψ" iA
Ψ
endsnippet
snippet \Omega "Ω" iA
Ω
endsnippet
snippet \alpha "α" iA
α
endsnippet
snippet \beta "β" iA
β
endsnippet
snippet \gamma "γ" iA
γ
endsnippet
snippet \delta "δ" iA
δ
endsnippet
snippet \upepsilon "ε" iA
ε
endsnippet
snippet \varepsilon "ε" iA
ε
endsnippet
snippet \zeta "ζ" iA
ζ
endsnippet
snippet \eta "η" iA
η
endsnippet
snippet \theta "θ" iA
θ
endsnippet
snippet \iota "ι" iA
ι
endsnippet
snippet \kappa "κ" iA
κ
endsnippet
snippet \lambda "λ" iA
λ
endsnippet
snippet \mu "μ" iA
μ
endsnippet
snippet \nu "ν" iA
ν
endsnippet
snippet \xi "ξ" iA
ξ
endsnippet
snippet \upomicron "ο" iA
ο
endsnippet
snippet \pi "π" iA
π
endsnippet
snippet \rho "ρ" iA
ρ
endsnippet
snippet \varsigma "ς" iA
ς
endsnippet
snippet \sigma "σ" iA
σ
endsnippet
snippet \tau "τ" iA
τ
endsnippet
snippet \upsilon "υ" iA
υ
endsnippet
snippet \varphi "φ" iA
φ
endsnippet
snippet \chi "χ" iA
χ
endsnippet
snippet \psi "ψ" iA
ψ
endsnippet
snippet \omega "ω" iA
ω
endsnippet
snippet \upvarbeta "ϐ" iA
ϐ
endsnippet
snippet \vartheta "ϑ" iA
ϑ
endsnippet
snippet \phi "ϕ" iA
ϕ
endsnippet
snippet \varpi "ϖ" iA
ϖ
endsnippet
snippet \upoldKoppa "Ϙ" iA
Ϙ
endsnippet
snippet \upoldkoppa "ϙ" iA
ϙ
endsnippet
snippet \Stigma "Ϛ" iA
Ϛ
endsnippet
snippet \upstigma "ϛ" iA
ϛ
endsnippet
snippet \Digamma "Ϝ" iA
Ϝ
endsnippet
snippet \digamma "ϝ" iA
ϝ
endsnippet
snippet \Koppa "Ϟ" iA
Ϟ
endsnippet
snippet \upkoppa "ϟ" iA
ϟ
endsnippet
snippet \Sampi "Ϡ" iA
Ϡ
endsnippet
snippet \upsampi "ϡ" iA
ϡ
endsnippet
snippet \varkappa "ϰ" iA
ϰ
endsnippet
snippet \varrho "ϱ" iA
ϱ
endsnippet
snippet \varTheta "ϴ" iA
ϴ
endsnippet
snippet \epsilon "ϵ" iA
ϵ
endsnippet
snippet \backepsilon "϶" iA
϶
endsnippet

# vim:ft=snippets:
